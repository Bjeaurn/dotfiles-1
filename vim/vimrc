" ***************************************
" ***  Define plugins
" ***************************************

call plug#begin("~/.vim/plugged")

Plug 'fcpg/vim-fahrenheit'
Plug 'janko-m/vim-test'
Plug 'junegunn/fzf.vim' | Plug '/usr/local/opt/fzf'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-sensible'
Plug 'vimwiki/vimwiki'
Plug 'wincent/terminus'

call plug#end()



" ***************************************
" ***  Behavior
" ***************************************

" Put swap files and backups in . only as a last resort
set directory-=.
set directory+=.
set backupdir-=.
set backupdir+=.
" Leaders
let g:mapleader="\<space>"
let g:maplocalleader=','
" Search more easily
set ignorecase smartcase



" ***************************************
" ***  Navigation
" ***************************************

" Pressing up in a long line gets you to the above line 'in the screen',
" but if you precede it with a count, you get the old behavior
" and if the count > 5, we'll also add it to the jump list so we can do C-O and C-I
nnoremap <expr> j v:count ? (v:count > 5 ? "m'" . v:count : '') . 'j' : 'gj'
nnoremap <expr> k v:count ? (v:count > 5 ? "m'" . v:count : '') . 'k' : 'gk'
" Allow for easy window switching.
map <C-H> <C-W>h
map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l



" ***************************************
" ***  Tabbing
" ***************************************

" Set a nice default tab stop level.
set expandtab smarttab tabstop=2 shiftwidth=2 softtabstop=2
" Make it possible to change tab stop levels quickly.
map <silent> <Leader>t2 :call SetTabstop(2)<CR>:echo "Indentation level: 2"<CR>
map <silent> <Leader>t4 :call SetTabstop(4)<CR>:echo "Indentation level: 4"<CR>
map <silent> <Leader>t8 :call SetTabstop(8)<CR>:echo "Indentation level: 8"<CR>
map <silent> <Leader>t0 :set noexpandtab nosmarttab tabstop=4 shiftwidth=4 softtabstop=4<CR>:echo "Indentation level: tab"<CR>
function! SetTabstop(stop)
    exec 'set expandtab smarttab tabstop=' . a:stop . ' shiftwidth=' . a:stop . ' softtabstop=' . a:stop
endfunction



" ***************************************
" ***  Appearance
" ***************************************

" Make it look purty (but suppress the error if the colorscheme doesn't exist)
silent! colorscheme fahrenheit
set background=dark
" Use a nice font with ligatures
if has('gui_running')
    set guifont=Fira\ Code\ Retina:h13
    if has('gui_macvim')
        set macligatures
    endif
endif
" Show line-numbers
set number
" Don't wrap lines in the middle of a word. That's not cool.
set linebreak



" ***************************************
" ***  Silly shift-pressing mistakes
" ***************************************

if has('user_commands')
    command! -bang -nargs=* -complete=file E e<bang> <args>
    command! -bang -nargs=* -complete=file W w<bang> <args>
    command! -bang -nargs=* -complete=file Wq wq<bang> <args>
    command! -bang -nargs=* -complete=file WQ wq<bang> <args>
    command! -bang Wa wa<bang>
    command! -bang WA wa<bang>
    command! -bang Q q<bang>
    command! -bang QA qa<bang>
    command! -bang Qa qa<bang>
endif



" ***************************************
" ***  Plugin configuration
" ***************************************

" FZF
let g:fzf_command_prefix = 'Fzf'
nnoremap <C-P> :FzfFiles<CR>
" Key mappings within FZF to define how to open a file
let g:fzf_action = {
    \ 'enter': 'split',
    \ 'space': 'e'
    \ }

" Vim-Test
let test#strategy = "dispatch"
nnoremap <leader>ta :TestSuite<CR>
nnoremap <leader>tf :TestFile<CR>
nnoremap <leader>tt :TestNearest<CR>

" VimWiki
nnoremap <F12> :VimwikiIndex<CR>
let g:vimwiki_list = [{'path': '~/Dropbox/vimwiki', 'syntax': 'markdown', 'ext': '.wiki'}]
let g:vimwiki_folding = 'expr'
augroup VimWiki
    autocmd!
    autocmd FileType vimwiki setlocal foldexpr=StackedMarkdownFolds()
augroup END



" ***************************************
" ***  VIM itself!
" ***************************************

" Open vimrc
:command! EditVimrc e ~/.vim/vimrc
" Reload vimrc
:command! ReloadVimrc source ~/.vim/vimrc
" Reload vimrc whenever it's written
augroup AutoSourceVimrc
    autocmd!
    autocmd BufWritePost vimrc ReloadVimrc
augroup END



" ***************************************
" ***  File types
" ***************************************

augroup Maven
    autocmd!
    autocmd BufRead pom.xml compiler maven
    autocmd FileType java compiler maven
    autocmd FileType scala compiler maven
augroup END

